	
	https://github.com/OneEightZeroOne
	

	安装淘宝镜像：
		$ npm install -g cnpm --registry=https://registry.npm.taobao.org

		$ cnpm install xxx	//安装模块


	配置ssh（git公钥，私钥）：
		1.cd ~/.ssh
		2. ssh-keygen -t rsa -C "934694566@qq.com"


	上传项目至github：	git init	//初始化目录
			git add .	//上传所有文件
			git commit -m "xxx"	//上传文件注释
			git remote add origin git@github.com:Bluejkc/laochen.git	
			git push -u origin master
	
		
	获取github项目：	git clone xxx	//获取整个项目
			git pull		//获取更新的文件
			git pull -f		//强制合并文件


	如果报(Pulling is not possible because you have unmerged files)这个错
	则先敲git reset --hard FETCH_HEAD   再git pull origin master --allow-unrelated-histories


	安装模块；npm i xxx


	常用npm模块：
	导出模块：module.exports = (数组，对象，函数。。。)
	导入模块：var  xx = require('xx');或者  require("相对路径/文件名.js")
	       常用内置模块：
		fs		//文件系统：文件的增删查改

		os		//操作系统：操作一些系统信息

	       第三方模块：(一部分模块及方法)

		cheerio		//遍历/操纵结果数据结构
			const $ = cheerio.load('<x>xxx<x/>')传入HTML结构赋给$，通过$符号操作DOM结构

		request		//
			request('http://www.google.com//网址', function (error//判断是否错误, response响应头, body//响应体html结构) {
				//可以利用body挖掘网站内容
・			}

		express		//框架	
			var app = express()
			路由：找资源文件的路径

			处理get请求:
				app.get('/', function (req, res) {
  					res.send('Hello World')
				})
			处理post请求：
			处理post请求,相对get请求会麻烦点，需要`body-parser`配合`req.body`
				var bodyParser = require('body-parser');
				// parse application/x-www-form-urlencoded
				app.use(bodyParser.urlencoded({ extended: false }))
 
				// parse application/json
				app.use(bodyParser.json())
				app.post()
			app.listen(3000)//端口号
			处理get请求，获取参数只需要`req.query`

		mysql		//连接数据库
			var connection = mysql.createConnection({
  				host     : 'localhost',	//本地数据库
  				user     : 'root',	//数据库登录名
  				password : ' ',	//数据库登录密码
  				database : 'xxx'	//数据库名
			});
			connection.connect();	//进行连接
			connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {
  				if (error) throw error;
  				console.log('The solution is: ', results[0].solution);
			});			//执行sql语句
			connection.end();		//结束连接


		body-parser	//
			app.use(bodyParser.urlencoded({ extended: false }))
			app.use(bodyParser.json())


		http		//原生（与express差不多）
			//创建server服务器
			var server = http.createServer(function(req,res){
				res.end("xxx")
			})

			//创建socketio服务器
			var io= socketio(server)
				
			server.listen(123456)//端口号
			//创建连接
			io.on("connection",function(){	//前端发送到后端
				//soketio发生消息
				socket.emit('新闻'，'新闻内容')	//后端发送到前端
				socket.on('')		//接收前端发送来的消息
			})

		socketio		//
	启动nodejs	node server

mongodb:
	C:\Program Files\MongoDB\Server\3.2\bin输入cmd
	mongodb
		创建mongdb数据库
		mongod  --dbpath  '你要创建数据库的路径'
		mongo.exe	//启动数据库
		
		连接mongodb：const url = 'mongodb://localhost:27017';
		连接数据库：const dbName = '数据库名'
;
		选择数据库：use xxx
		显示所有数据库：show dbs
		查看数据库中的集合名： show collections
		插入数据：db.blog.insert(post)
		=>MongoClient.connect(url, function(err, client) {
			assert.equal(null, err);
			console.log("Connected successfully to server");

			const db = client.db(dbName);
			//添加db.collection('表名').insertMany([ ]，function(err,result){ })
			//查询db.collection('表名').find({}).toArray(function(err, docs) {console.log(docs);})
			//删除db.collection('表名').deleteOne({}, function(err, result) {console.log(result)})
			//改db.collection('表名').update({}, function(err, result) {console.log(result)})
			关闭数据库：client.close();

		批量插入：db.blog.insertMany([{"_id":0},{"_id":1},{"_id":2}])
		查询数据：db.blog.find()
		修改数据：db.blog.update({"title":"My Blog Post"},post)
		删除数据：db.blog.remove({"title":"My Blog Post"})
		删除所有数据：db.blog.drop()
		
		

	避免每次更改node后需重新启动node，最好使用PM2模块，实时查看变化的数据（需全局安装）

CAO首席行政官、CBO首席品牌官、 CCO首席文化官 、CEO首席执行官、 CFO财务总监、 CHO首席人事官、 CIO首席信息官、 CRO首席研究官、 CKO首市知识官、 CMO首席市场官、 CNO首席谈判官、 CTO首席技术官、 CLO首席法律官、 COO首席运营官、 CPO首席公关官、 CQO首席质量官、 CSO首席问题官、 CUO客户总监
